@use './variables' as *;
/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin breakpoint-up ($breakpoint) {
    $raw-query: map-get($breakpoints-up, $breakpoint);

    @if $raw-query {
        $query: if(
            type-of($raw-query) == 'string',
            unquote($raw-query),
            inspect($raw-query)
        );

        @media #{$query} {
            @content;
        }
    } @else {
        @error 'No value found for `#{$breakpoint}`. '
                + 'Please make sure it is defined in `$breakpoints` map.';
    }
}
@mixin breakpoint-dw ($breakpoint) {
  $raw-query: map-get($breakpoints-dw, $breakpoint);
  @if $raw-query {
    $query: if(type-of($raw-query) == 'string',
    unquote($raw-query),
    inspect($raw-query));

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. ' + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin overlay($color, $opacity) {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba($color, $opacity);
}

// fluid-typography
@mixin fluid-font($min-width, $max-width, $min-font-size, $max-font-size) {
    $unit1: unit($min-width);
    $unit2: unit($max-width);
    $unit3: unit($min-font-size);
    $unit4: unit($max-font-size);
    @if $unit1 == $unit2 and $unit1 == $unit3 and $unit1 == $unit4 {
      & {
        font-size: $min-font-size;
        line-height: $min-font-size * 1.618;
        @media screen and (min-width: $min-width) {
          font-size: calc(
            #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
              ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)})
          );
          line-height: calc(
            #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
              1.618 *
              ((100vw - #{$min-width}) / #{strip-unit($max-width - $min-width)})
          );
        }
        @media screen and (min-width: $max-width) {
          font-size: $max-font-size;
          line-height: $max-font-size * 1.618;
        }
      }
    }
  }
  // Text shortening
  // Default line-clamp is 1
@mixin text-shorten($numLines: 1) {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
   
    @supports (-webkit-line-clamp: $numLines) {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: initial;
      display: -webkit-box;
      -webkit-line-clamp: $numLines;
      -webkit-box-orient: vertical;
    }
  }
  // Position
  @mixin position($position: absolute, $top: null, $right: null, $bottom: null, $left: null, $z-index: initial) {
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    z-index: $z-index;
  }
  
  // Box
  @mixin box($width, $height: $width) {
    width: $width;
    height: $height;
  }
  
    //Flexbox Toolkit
    @mixin flex-center($direction) {
      display: flex;
      @if ($direction == 'x') {
        justify-content:center;
      } @else if ($direction == 'y') {
        align-items:center;
      } @else if ($direction == 'both') {
        align-items: center;
        justify-content: center;
      }
    }
  // position centering
  @mixin position-center($direction) {
    position: absolute;

    @if $direction == 'x' {
        left: 50%;
        transform: translateX(-50%);
    } @else if $direction == 'y' {
        top: 50%;
        transform: translateY(-50%);
    } @else if $direction == 'both' {
        left: 50%;
        top: 50%;
        transform: translate(-50%,-50%);
    }
}

// Grid auto fit
@mixin grid-auto-fit($min) {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax($min, 1fr));
}
